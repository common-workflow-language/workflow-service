basePath: /ga4gh/wes/v1
swagger: '2.0'
info:
  title: Workflow Execution Service
  version: 0.2.1
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /service-info:
    get:
      summary: |-
        Get information about Workflow Execution Service.  May include information related (but
        not limited to) the workflow descriptor formats, versions supported, the WES API versions supported, and information about general the service availability.
      x-swagger-router-controller: ga4gh.wes.server
      operationId: GetServiceInfo
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ServiceInfo'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      tags:
        - WorkflowExecutionService
  /workflows:
    get:
      summary: |-
        List the workflows, this endpoint will list the workflows in order of oldest to newest.
        There is no guarantee of live updates as the user traverses the pages, the behavior should be
        decided (and documented) by each implementation.
        To monitor a given execution, use GetWorkflowStatus or GetWorkflowLog.
      x-swagger-router-controller: ga4gh.wes.server
      operationId: ListWorkflows
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WorkflowListResponse'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: page_size
          description: |-
            OPTIONAL
            Number of workflows to return in a page.
          in: query
          required: false
          type: integer
          format: int64
        - name: page_token
          description: |-
            OPTIONAL
            Token to use to indicate where to start getting results. If unspecified, returns the first
            page of results.
          in: query
          required: false
          type: string
        - name: tag_search
          description: |-
            OPTIONAL
            For each key, if the key's value is empty string then match workflows that are tagged with
            this key regardless of value.
          in: query
          required: false
          type: string
      tags:
        - WorkflowExecutionService
    post:
      summary: |-
        Run a workflow.  This endpoint creates a new workflow run and
        returns the workflow ID to monitor its progress.

        The request may upload files that are required to execute the
        workflow identified as `workflow_attachment`.  The parts
        supplied in `workflow_attachment` may include the primary
        workflow, tools imported by the workflow, other files
        referenced by the workflow, or files which are part of the
        input.  The implementation should stage these files to a
        temporary directory and execute the workflow from there.
        These parts must have a Content-Disposition header with a
        "filename" provided for each part.  Filenames may include
        subdirectories, but must not include references to parent
        directories with '..', implementations should guard against
        maliciously constructed filenames.

        The `workflow_url` is either an absolute URL to a workflow
        file that is accessible by the WES endpoint, or a relative URL
        corresponding to one of the files attached using
        `workflow_attachment`.

        The `workflow_params` JSON object specifies input parameters,
        such as input files.  The exact format of the JSON object
        depends on the conventions of the workflow language being
        used.  Input files should either be absolute URLs, or relative
        URLs corresponding to files uploaded using
        `workflow_attachment`.  The WES endpoint must understand and
        be able to access URLs supplied in the input.  This is
        implementation specific.

        See documentation for WorkflowRequest for detail about other
        fields.

      x-swagger-router-controller: ga4gh.wes.server
      operationId: RunWorkflow
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WorkflowRunId'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      consumes:
         - multipart/form-data
      parameters:
        - in: formData
          name: workflow_params
          type: string
          format: application/json

        - in: formData
          name: workflow_type
          type: string

        - in: formData
          name: workflow_type_version
          type: string

        - in: formData
          name: tags
          type: string
          format: application/json

        - in: formData
          name: workflow_engine_parameters
          type: string
          format: application/json

        - in: formData
          name: workflow_url
          type: string

        - in: formData
          name: workflow_attachment
          type: array
          items:
            type: string
            format: binary
      tags:
        - WorkflowExecutionService
  '/workflows/{workflow_id}':
    get:
      summary: Get detailed info about a running workflow.
      x-swagger-router-controller: ga4gh.wes.server
      operationId: GetWorkflowLog
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WorkflowLog'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The requested Workflow found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: workflow_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService
    delete:
      summary: Cancel a running workflow.
      x-swagger-router-controller: ga4gh.wes.server
      operationId: CancelJob
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WorkflowRunId'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The requested Workflow wasn't found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: workflow_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService
  '/workflows/{workflow_id}/status':
    get:
      summary: Get quick status info about a running workflow.
      x-swagger-router-controller: ga4gh.wes.server
      operationId: GetWorkflowStatus
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/WorkflowStatus'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The requested Workflow wasn't found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: workflow_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService
definitions:
  DefaultWorkflowEngineParameter:
    type: object
    properties:
      type:
        type: string
        description: 'Describes the type of the parameter, e.g. float.'
      default_value:
        type: string
        description: The stringified version of the default parameter. e.g. "2.45".
    description: |-
      A message that allows one to describe default parameters for a workflow
      engine.
  Log:
    type: object
    properties:
      name:
        type: string
        title: The task or workflow name
      cmd:
        type: array
        items:
          type: string
        title: The command line that was run
      start_time:
        type: string
        title: When the command was executed
      end_time:
        type: string
        title: When the command completed
      stdout:
        type: string
        title: Sample of stdout (not guaranteed to be entire log)
      stderr:
        type: string
        title: Sample of stderr (not guaranteed to be entire log)
      exit_code:
        type: integer
        format: int32
        title: Exit code of the program
    title: Log and other info
  ServiceInfo:
    type: object
    properties:
      workflow_type_versions:
        type: object
        additionalProperties:
          $ref: '#/definitions/WorkflowTypeVersion'
        title: |-
          A map with keys as the workflow format type name (currently only CWL and WDL are used
          although a service may support others) and value is a workflow_type_version object which
          simply contains an array of one or more version strings
      supported_wes_versions:
        type: array
        items:
          type: string
        title: The version(s) of the WES schema supported by this service
      supported_filesystem_protocols:
        type: array
        items:
          type: string
        description: |-
          The filesystem protocols supported by this service, currently these may include common
          protocols such as 'http', 'https', 'sftp', 's3', 'gs', 'file', 'synapse', or others as
          supported by this service.
      workflow_engine_versions:
        type: object
        additionalProperties:
          type: string
        title: 'The engine(s) used by this WES service, key is engine name e.g. Cromwell and value is version'
      default_workflow_engine_parameters:
        type: array
        items:
          $ref: '#/definitions/DefaultWorkflowEngineParameter'
        description: |-
          Each workflow engine can present additional parameters that can be sent to the
          workflow engine. This message will list the default values, and their types for each
          workflow engine.
      system_state_counts:
        type: object
        additionalProperties:
          type: integer
          format: int64
        description: |-
          The system statistics, key is the statistic, value is the count of workflows in that state.
          See the State enum for the possible keys.
      auth_instructions_url:
        type: string
        description: |-
          A URL that will help a in generating the tokens necessary to run a workflow using this
          service.
      tags:
        type: object
        additionalProperties:
          type: string
        title: |-
          A key-value map of arbitrary, extended metadata outside the scope of the above but useful
          to report back
    description: |-
      A message containing useful information about the running service, including supported versions and
      default settings.
  State:
    type: string
    enum:
      - UNKNOWN
      - QUEUED
      - INITIALIZING
      - RUNNING
      - PAUSED
      - COMPLETE
      - EXECUTOR_ERROR
      - SYSTEM_ERROR
      - CANCELED
    default: UNKNOWN
    description: |-
      - UNKNOWN: The state of the task is unknown.

      This provides a safe default for messages where this field is missing,
      for example, so that a missing field does not accidentally imply that
      the state is QUEUED.
       - QUEUED: The task is queued.
       - INITIALIZING: The task has been assigned to a worker and is currently preparing to run.
      For example, the worker may be turning on, downloading input files, etc.
       - RUNNING: The task is running. Input files are downloaded and the first Executor
      has been started.
       - PAUSED: The task is paused.

      An implementation may have the ability to pause a task, but this is not required.
       - COMPLETE: The task has completed running. Executors have exited without error
      and output files have been successfully uploaded.
       - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,
      this means that an Executor exited with a non-zero exit code.
       - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,
      for example an upload failed due to network issues, the worker's ran out
      of disk space, etc.
       - CANCELED: The task was canceled by the user.
    title: Enumeration of states for a given workflow request
  WorkflowDescription:
    type: object
    properties:
      workflow_id:
        type: string
        title: REQUIRED
      state:
        $ref: '#/definitions/State'
        title: REQUIRED
    title: 'Small description of workflows, returned by server during listing'
  WorkflowListResponse:
    type: object
    properties:
      workflows:
        type: array
        items:
          $ref: '#/definitions/WorkflowDescription'
        description: A list of workflows that the service has executed or is executing.
      next_page_token:
        type: string
        description: |-
          A token, which when provided in a workflow_list_request, allows one to retrieve the next page
          of results.
    description: The service will return a workflow_list_response when receiving a successful workflow_list_request.
  WorkflowLog:
    type: object
    properties:
      workflow_id:
        type: string
        title: workflow ID
      request:
        $ref: '#/definitions/WorkflowRequest'
        description: The original request message used to initiate this execution.
      state:
        $ref: '#/definitions/State'
        title: state
      workflow_log:
        $ref: '#/definitions/Log'
        title: 'the logs, and other key info like timing and exit code, for the overall run of this workflow'
      task_logs:
        type: array
        items:
          $ref: '#/definitions/Log'
        title: 'the logs, and other key info like timing and exit code, for each step in the workflow'
      outputs:
        $ref: '#/definitions/WesObject'
        title: the outputs
  WorkflowRequest:
    type: object
    properties:
      workflow_params:
        $ref: '#/definitions/WesObject'
        description: |-
          REQUIRED
          The workflow parameterization document (typically a JSON file), includes all parameterizations for the workflow
          including input and output file locations.
      workflow_type:
        type: string
        title: |-
          REQUIRED
          The workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)
      workflow_type_version:
        type: string
        title: |-
          REQUIRED
          The workflow descriptor type version, must be one supported by this WES instance
      tags:
        type: object
        additionalProperties:
          type: string
        title: |-
          OPTIONAL
          A key-value map of arbitrary metadata outside the scope of the workflow_params but useful to track with this workflow request
      workflow_engine_parameters:
        type: object
        additionalProperties:
          type: string
        description: |-
          OPTIONAL
          Additional parameters can be sent to the workflow engine using this field. Default values
          for these parameters are provided at the ServiceInfo endpoint.
      workflow_url:
        type: string
        description: |-
          REQUIRED
          The workflow CWL or WDL document.
          When workflow attachments files are provided, the `workflow_url` may be a relative path
          corresponding to one of the attachments.
    description: |-
      To execute a workflow, send a workflow request including all the details needed to begin downloading
      and executing a given workflow.
  WorkflowRunId:
    type: object
    properties:
      workflow_id:
        type: string
        title: workflow ID
  WorkflowStatus:
    type: object
    properties:
      workflow_id:
        type: string
        title: workflow ID
      state:
        $ref: '#/definitions/State'
        title: state
  WorkflowTypeVersion:
    type: object
    properties:
      workflow_type_version:
        type: array
        items:
          type: string
        description: |-
          an array of one or more acceptable types for the Workflow Type. For
          example, to send a base64 encoded WDL gzip, one could would offer
          "base64_wdl1.0_gzip". By setting this value, and the path of the main WDL
          to be executed in the workflow_url to "main.wdl" in the WorkflowRequest.
    description: Available workflow types supported by a given instance of the service.
  WesObject:
    type: object
    additionalProperties: true
    description: |-
        An arbitrary structured object.
  ErrorResponse:
    description: |-
      An object that can optionally include information about the error.
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).